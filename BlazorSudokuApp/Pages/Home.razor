@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http

<h1>9x9 Sudoku</h1>

    <table border="5" cellpadding="0" cellspacing="0">
    @for (int i = 0; i < 9; i += 3)
    {
        <tr>
            @for (int j = 0; j < 9; j += 3)
            {
                <td>
                    <table border="1" cellpadding="2">
                        @for (int k = 0; k < 3; k++)
                        {
                            <tr>
                                @for (int l = 0; l < 3; l++)
                                {
                                    var rowIndex = i + k;
                                    var colIndex = j + l;
                                    <td style="border: 3px solid black;">
                                        <input @bind="@GridValues[rowIndex, colIndex]" type="text" min="1" max="9" required size="1" maxlength="1" 
                                               @oninput="async (e) => await SaveTextToLocalStorage(rowIndex, colIndex, e)" 
                                               onkeypress="return event.key >= '1' && event.key <= '9'"
                                               style="color: @GridColors[rowIndex, colIndex]; width: 50px; height: 50px; text-align: center; font-size: 2.3em;"
                                               readonly="@(GridColors[rowIndex, colIndex] == "blue" ? true : false)" 
                                               />
                                    </td>
                                }
                            </tr>
                        }
                    </table>
                </td>
            }
        </tr>
    }
    </table>
    <div style="margin-top: 10px;"> <!-- Adjust margin-top as needed -->
    <button @onclick="GenerateSudoku">Generate Board</button>
    <button @onclick="WipeBoard" style="margin-left: 10px;">Clear Board</button> <!-- Adjust margin-left as needed -->
    </div>

    

@code {
    char?[,] GridValues = new char?[9, 9]; 
    string[,] GridColors = new string[9, 9]; // Add this line to declare GridColors array
    static SudokuInfo[]? sudokuInfo;
    int currentSudokuId = 0;
    void GenerateSudoku(){
        Console.WriteLine("The testing button is working");

        Random random = new Random();
        int randomNumber = random.Next(sudokuInfo.Length);

        PopulateGridFromPuzzle(randomNumber);
        SaveGridToLocalStorage();
     }
     protected override async Task OnInitializedAsync(){
        sudokuInfo = await Http.GetFromJsonAsync<SudokuInfo[]>("sample-data/ValidSudokus.json");
        await PopulateGridFromLocalStorage(); // Populate the grid from local storage
    }
    async Task SaveTextToLocalStorage(int row, int col, ChangeEventArgs e){
        Console.WriteLine($"Saving value at row {row}, column {col}");
        if (row >= 0 && row < 9 && col >= 0 && col < 9){
            try {
                GridValues[row, col] = (char?)e.Value.ToString()[0];
                Console.WriteLine($"Grid value: {GridValues[row, col]}");
                await localStorage.SetItemAsync($"GridValue_{row}_{col}", GridValues[row, col].ToString());
            }
            catch {
                await localStorage.SetItemAsync($"GridValue_{row}_{col}", '.');
            }
        }
        else{
            Console.WriteLine("Invalid row or column index");
        }
    }
    async Task SaveGridToLocalStorage() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (GridValues[i, j] != null) {
                    await localStorage.SetItemAsync($"GridValue_{i}_{j}", GridValues[i, j].ToString());
                } 
                else {
                    await localStorage.SetItemAsync($"GridValue_{i}_{j}", '.'); 
                }
            }
        }
    }
    async Task WipeGridFromLocalStorage() {

        // Create a list to hold all keys related to the grid
        var keys = new List<string>();
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                keys.Add($"GridValue_{i}_{j}");
            }
        }
        // Clear all items in local storage using these keys
        foreach (var key in keys) {
            await localStorage.RemoveItemAsync(key);
        }
    }
    async Task WipeBoard(){
        for (int i = 0; i < 9; i++){
            for (int j = 0; j < 9; j++){
                GridValues[i, j] = null;
                GridColors[i,j] = "black"; // Changes the color of the number in the grid to turn off readonly
            }
        }
        await WipeGridFromLocalStorage(); // Call the method after clearing the grid in memory
    }

    void PopulateGridFromPuzzle(int puzzleId) {
        string puzzle = sudokuInfo[puzzleId].Puzzle;
        int index = 0;
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                GridColors[i,j] = "black";
                GridValues[i, j] = puzzle[index++];
                if (GridValues[i, j] != null) {
                    char value = GridValues[i, j].Value;
                    if (value == '.'){
                        GridValues[i, j] = null;
                    }
                    else {
                        // Change the color based on the value
                        GridColors[i,j] = "blue";
                        
                    }
                }
            }
        }
    }
    async Task PopulateGridFromLocalStorage() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                // Retrieve the value from local storage
                var gridValue = await localStorage.GetItemAsync<char?>($"GridValue_{i}_{j}");
                // Set the grid value and color
                GridValues[i, j] = gridValue;
                if (gridValue != null) {
                    char value = gridValue.Value;
                    if (value == '.') {
                        GridValues[i, j] = null;
                        GridColors[i, j] = "black";
                    }
                    else {
                        GridColors[i, j] = "blue"; // Or any other color based on your requirement
                    }
                }
            }
        }
    }


    public class SudokuInfo
{
    public int Id {get; set;}
    public string Puzzle { get; set; }
    public string Solution { get; set; }
    public int? GivenNumbers { get; set; }
}
}